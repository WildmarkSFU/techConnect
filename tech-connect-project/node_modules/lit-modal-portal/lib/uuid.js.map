{
  "version": 3,
  "sources": ["../src/lib/uuid.ts"],
  "sourcesContent": ["/**\n * https://gist.github.com/jed/982883\n * https://gist.github.com/jed/982883?permalink_comment_id=3123179#gistcomment-3123179\n *\n * Generates a UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx.\n *\n * The '4' denotes the version of UUID, which means that they are randomly generated,\n * as opposed to incorporating the time, MAC address, etc.\n * The 'y' is a random hexadecimal number from 8 to b, which specifies Variant 1 UUIDs.\n * (see https://datatracker.ietf.org/doc/html/rfc4122)\n *\n * use just like:\n * import uuid from './path/to/uuid.ts';\n * const id = uuid();\n */\n\nconst template = `${1e7}-${1e3}-${4e3}-${8e3}-${1e11}`; // 10000000-1000-4000-8000-100000000000\nconst hexChar = (a: number) => (a ^ ((Math.random() * 16) >> (a / 4))).toString(16); // The bitmask is truncated when a = 8, ensuring Variant 1.\n\nexport default function uuid(a?: string): string {\n  // Recursively replace the template string with random hex characters.\n  return a ? hexChar(Number(a)) : template.replace(/[018]/g, uuid);\n}\n"],
  "mappings": "AAgBA,MAAM,WAAW,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI;AACpD,MAAM,UAAU,CAAC,OAAe,IAAM,KAAK,OAAO,IAAI,MAAQ,IAAI,GAAK,SAAS,EAAE;AAEnE,SAAR,KAAsB,GAAoB;AAE/C,SAAO,IAAI,QAAQ,OAAO,CAAC,CAAC,IAAI,SAAS,QAAQ,UAAU,IAAI;AACjE;",
  "names": []
}
