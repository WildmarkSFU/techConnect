{
  "version": 3,
  "sources": ["../src/lib/state.ts"],
  "sourcesContent": ["/**\n * [immutable]: https://immutable-js.com/docs\n * This is an excerpt of a utility module used to manage typed, immutable state.\n * Please refer to [the immutable-js documentation][immutable].\n *\n * @module\n */\nimport { ReactiveElement } from 'lit';\nimport { Map, is } from 'immutable';\n\n/**\n * A typed (immutable) [Map](https://immutable-js.com/docs/v4.1.0/Map/)\n * whose keys are parameterized to be the union type of all the keys of `T`.\n *\n * @typeParam T An [object type](https://www.typescriptlang.org/docs/handbook/2/objects.html)\n */\nexport type MapOf<T> = Map<keyof T, any>;\n\n/**\n * Returns the result of merging `newState` into `existingState`.\n *\n * @typeParam T The type of the managed state, assumed to be an\n * [object type](https://www.typescriptlang.org/docs/handbook/2/objects.html)\n */\nexport function applyState<T>(existingState: MapOf<T>, newState: Partial<T>): MapOf<T> {\n  if (newState === undefined || Object.keys(newState).length == 0) {\n    return existingState;\n  }\n\n  return existingState.merge(Object.entries(newState) as [keyof T, any]);\n}\n\n/**\n * The StatefulElement interface is ideally implemented by a component whose state\n * is managed by a Lit controller. It declares an `offerState()` method that can be used\n * to update the component's state from the controller.\n *\n * @typeParam T The type of the managed state, assumed to be an\n * [object type](https://www.typescriptlang.org/docs/handbook/2/objects.html)\n */\nexport interface StatefulElement<T> extends ReactiveElement {\n  /**\n   * Consumes `state`, performing render updates and other actions as necessary.\n   */\n  offerState(state: MapOf<T>): void;\n}\n\n/**\n * Typed wrapper around membership checking for [[`MapOf`]]'s.\n * Returns true if `newState` has the property given by `name` defined\n * and the value of `newState.get(name)` is different than `current`.\n *\n * See [`Map.has()`](https://immutable-js.com/docs/v4.1.0/Map/#has())\n * and [`is()`](https://immutable-js.com/docs/v4.1.0/is()/).\n *\n * @typeParam T An [object type](https://www.typescriptlang.org/docs/handbook/2/objects.html)\n */\nexport function isNew<T>(newState: MapOf<T>, name: keyof T, current: any) {\n  return newState.has(name) && !is(newState.get(name), current);\n}\n"],
  "mappings": "AAQA,SAAc,UAAU;AAgBjB,SAAS,WAAc,eAAyB,UAAgC;AACrF,MAAI,aAAa,UAAa,OAAO,KAAK,QAAQ,EAAE,UAAU,GAAG;AAC/D,WAAO;AAAA,EACT;AAEA,SAAO,cAAc,MAAM,OAAO,QAAQ,QAAQ,CAAmB;AACvE;AA2BO,SAAS,MAAS,UAAoB,MAAe,SAAc;AACxE,SAAO,SAAS,IAAI,IAAI,KAAK,CAAC,GAAG,SAAS,IAAI,IAAI,GAAG,OAAO;AAC9D;",
  "names": []
}
