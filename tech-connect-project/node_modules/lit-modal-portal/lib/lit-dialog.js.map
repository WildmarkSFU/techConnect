{
  "version": 3,
  "sources": ["../src/lib/lit-dialog.ts"],
  "sourcesContent": ["import { LitElement, CSSResultGroup, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { Ref, ref, createRef } from 'lit/directives/ref.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nexport type ModalSize = 'small' | 'large';\n\n/**\n * A wrapper around the `<dialog>` element that hooks into the [[ModalPortal]] API.\n * The dialog's `showModal()` function is called after this component is first\n * rendered in the DOM.\n * The `\"removeModal\"` event is triggered whenever the dialog closes.\n *\n * This custom element resets some of the default styles of `<dialog>` and effectively\n * makes its `<dialog>` a fixed flexbox container with all 0 insets.\n * In other words, it acts as a container for whatever is the content of the modal.\n * Whatever is put into this component's `<slot>` is responsible for having a border,\n * a fully opaque background, etc.\n */\n@customElement('lit-dialog')\nexport default class LitDialog extends LitElement {\n  static styles = css`\n    dialog {\n      display: flex;\n      justify-content: center;\n    }\n\n    dialog.unset {\n      border: unset;\n      background: unset;\n      max-width: unset;\n      max-height: unset;\n      height: unset;\n      width: unset;\n      margin: unset;\n    }\n\n    dialog::backdrop {\n      background: var(--lit-dialog-backdrop-bg, hsl(0 0% 0% / 0.3));\n    }\n\n    dialog[size='small'] {\n      align-items: center;\n    }\n\n    dialog[size='large'] {\n      padding: 4rem;\n    }\n  ` as CSSResultGroup;\n\n  /** Reference for the `<dialog>` element. */\n  protected dialogRef: Ref<HTMLDialogElement> = createRef();\n\n  /** Accessor for the value stored in [[dialogRef]]. */\n  protected get dialog(): HTMLDialogElement | undefined {\n    return this.dialogRef.value;\n  }\n\n  /** Used for the `<dialog>`'s `aria-label` attribute. */\n  @property()\n  label: string = '';\n\n  /**\n   * Boolean flag to determine if this modal should close when the user clicks\n   * outside of the modal content and in the backdrop area.\n   */\n  @property({ type: Boolean, attribute: false })\n  enableLightDismiss: boolean = false;\n\n  /**\n   * A size parameter that affects the styles of the `<dialog>` element. */\n  @property()\n  size: ModalSize = 'small';\n\n  @property({ type: Boolean, attribute: false })\n  unsetStyles: boolean = true;\n\n  get classes() {\n    return { unset: this.unsetStyles };\n  }\n\n  /** Convenience wrapper for the `<dialog>`'s `close()` function. */\n  close() {\n    this.dialog?.close();\n  }\n\n  /**\n   * Handler for the `<dialog>`'s `\"close\"` event.\n   * Triggers the `\"removeModal\"` event.\n   * @event removeModal\n   */\n  onDialogClose() {\n    this.dispatchEvent(new Event('removeModal', { bubbles: true, composed: true }));\n  }\n\n  firstUpdated() {\n    this.dialog.showModal();\n    this.dialog.addEventListener('close', () => this.onDialogClose());\n\n    if (this.enableLightDismiss) {\n      this.dialog.addEventListener('click', (e) => this.onClick(e));\n    }\n  }\n\n  onClick(event: MouseEvent) {\n    if (event.target === this.dialog) {\n      this.close();\n    }\n  }\n\n  render() {\n    return html`\n      <dialog\n        ${ref(this.dialogRef)}\n        class=${classMap(this.classes)}\n        size=${this.size}\n        aria-label=\"${this.label}\"\n        aria-modal=\"true\"\n      >\n        <slot></slot>\n      </dialog>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'lit-dialog': LitDialog;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,SAAS,YAA4B,MAAM,WAAW;AACtD,SAAS,eAAe,gBAAgB;AACxC,SAAc,KAAK,iBAAiB;AACpC,SAAS,gBAAgB;AAiBzB,IAAqB,YAArB,cAAuC,WAAW;AAAA,EAAlD;AAAA;AA+BE;AAAA,SAAU,YAAoC,UAAU;AASxD,iBAAgB;AAOhB,8BAA8B;AAK9B,gBAAkB;AAGlB,uBAAuB;AAAA;AAAA;AAAA,EArBvB,IAAc,SAAwC;AACpD,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA,EAqBA,IAAI,UAAU;AACZ,WAAO,EAAE,OAAO,KAAK,YAAY;AAAA,EACnC;AAAA;AAAA,EAGA,QAAQ;AACN,SAAK,QAAQ,MAAM;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AACd,SAAK,cAAc,IAAI,MAAM,eAAe,EAAE,SAAS,MAAM,UAAU,KAAK,CAAC,CAAC;AAAA,EAChF;AAAA,EAEA,eAAe;AACb,SAAK,OAAO,UAAU;AACtB,SAAK,OAAO,iBAAiB,SAAS,MAAM,KAAK,cAAc,CAAC;AAEhE,QAAI,KAAK,oBAAoB;AAC3B,WAAK,OAAO,iBAAiB,SAAS,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC;AAAA,IAC9D;AAAA,EACF;AAAA,EAEA,QAAQ,OAAmB;AACzB,QAAI,MAAM,WAAW,KAAK,QAAQ;AAChC,WAAK,MAAM;AAAA,IACb;AAAA,EACF;AAAA,EAEA,SAAS;AACP,WAAO;AAAA;AAAA,UAED,IAAI,KAAK,SAAS,CAAC;AAAA,gBACb,SAAS,KAAK,OAAO,CAAC;AAAA,eACvB,KAAK,IAAI;AAAA,sBACF,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B;AACF;AAvGqB,UACZ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuChB;AAAA,EADC,SAAS;AAAA,GAvCS,UAwCnB;AAOA;AAAA,EADC,SAAS,EAAE,MAAM,SAAS,WAAW,MAAM,CAAC;AAAA,GA9C1B,UA+CnB;AAKA;AAAA,EADC,SAAS;AAAA,GAnDS,UAoDnB;AAGA;AAAA,EADC,SAAS,EAAE,MAAM,SAAS,WAAW,MAAM,CAAC;AAAA,GAtD1B,UAuDnB;AAvDmB,YAArB;AAAA,EADC,cAAc,YAAY;AAAA,GACN;",
  "names": []
}
