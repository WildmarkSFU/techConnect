{
  "version": 3,
  "sources": ["src/portal.ts"],
  "sourcesContent": ["import { TemplateResult } from 'lit';\nimport { Directive, directive } from 'lit/directive.js';\n\nimport modalC, { ModalRegistry } from './modal-controller';\n\n/**\n * A directive to automate the act of managing a [[ModalRegistry]] based on a boolean condition.\n *\n * See [Lit docs on Custom Directives](https://lit.dev/docs/templates/custom-directives/).\n */\nexport class PortalDirective extends Directive {\n  /** Registry for a modal that is currently in the modal stack. */\n  modalRegistry?: ModalRegistry;\n\n  /** Resolves the template argument if it is a supplier function. */\n  getTemplate(templateOrSupplier: TemplateResult | (() => TemplateResult)): TemplateResult {\n    if (templateOrSupplier instanceof Function) {\n      return templateOrSupplier();\n    } else {\n      return templateOrSupplier;\n    }\n  }\n\n  /**\n   * The core logic of the [[portal | `portal`]] directive.\n   *\n   * If `showModal` is true, or if it is a Function that produces a truthy result,\n   * then the given `template` and optional `closeCallback` will be pushed to the [[ModalPortal | `<modal-portal>`]].\n   *\n   * If there already exists a registry for a modal sent using this exact directive,\n   * then it will be replaced using the new arguments.\n   *\n   * If `showModal` is falsy, then the modal is removed and the registry is reset.\n   */\n  render(\n    showModal: boolean | Function,\n    template: TemplateResult | (() => TemplateResult),\n    closeCallback?: Function,\n  ) {\n    // Reduce function to boolean if necessary.\n    if (showModal instanceof Function) {\n      showModal = showModal();\n    }\n\n    // If a modal registry already exists for this directive,\n    // then we are either replacing or removing.\n    if (this.modalRegistry) {\n      if (showModal) {\n        this.modalRegistry.replace(this.getTemplate(template), closeCallback);\n      } else {\n        this.modalRegistry.remove();\n        this.modalRegistry = undefined;\n      }\n    } else if (showModal) {\n      this.modalRegistry = modalC.push(this.getTemplate(template), closeCallback);\n    }\n  }\n}\n\n/**\n * To be used in Lit templates.\n *\n * See [[PortalDirective.render]]\n */\nexport const portal = directive(PortalDirective);\n"],
  "mappings": "AACA,SAAS,WAAW,iBAAiB;AAErC,OAAO,YAA+B;AAO/B,MAAM,wBAAwB,UAAU;AAAA;AAAA,EAK7C,YAAY,oBAA6E;AACvF,QAAI,8BAA8B,UAAU;AAC1C,aAAO,mBAAmB;AAAA,IAC5B,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OACE,WACA,UACA,eACA;AAEA,QAAI,qBAAqB,UAAU;AACjC,kBAAY,UAAU;AAAA,IACxB;AAIA,QAAI,KAAK,eAAe;AACtB,UAAI,WAAW;AACb,aAAK,cAAc,QAAQ,KAAK,YAAY,QAAQ,GAAG,aAAa;AAAA,MACtE,OAAO;AACL,aAAK,cAAc,OAAO;AAC1B,aAAK,gBAAgB;AAAA,MACvB;AAAA,IACF,WAAW,WAAW;AACpB,WAAK,gBAAgB,OAAO,KAAK,KAAK,YAAY,QAAQ,GAAG,aAAa;AAAA,IAC5E;AAAA,EACF;AACF;AAOO,MAAM,SAAS,UAAU,eAAe;",
  "names": []
}
