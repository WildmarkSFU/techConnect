import { WeavyContextType } from '../client/context-definition';
import { ContextConsumer } from '@lit/context';
import { QueryClient, MutationObserverResult, MutationObserverOptions, MutationObserver } from '@tanstack/query-core';
import { LitElement, ReactiveController, ReactiveControllerHost } from 'lit';

export declare class MutationController<TData, TError, TVariables, TContext> implements ReactiveController {
    host: ReactiveControllerHost;
    context?: ContextConsumer<{
        __context__: WeavyContextType;
    }, LitElement>;
    whenContext?: Promise<void>;
    resolveContext?: (value: void | PromiseLike<void>) => void;
    observer?: MutationObserver<TData, TError, TVariables, TContext>;
    result?: MutationObserverResult<TData, TError, TVariables, TContext>;
    private observerUnsubscribe?;
    constructor(host: ReactiveControllerHost);
    setContext(): Promise<void>;
    hostUpdate(): void;
    trackMutation(options: MutationObserverOptions<TData, TError, TVariables, TContext>, queryClient?: QueryClient): Promise<MutationObserver<TData, TError, TVariables, TContext>>;
    observerSubscribe(): void;
    untrackMutation(): void;
    get mutate(): (variables: TVariables, options?: import('@tanstack/query-core').MutateOptions<TData, TError, TVariables, TContext> | undefined) => Promise<TData>;
    hostConnected(): void;
    hostDisconnected(): void;
}
//# sourceMappingURL=mutation-controller.d.ts.map