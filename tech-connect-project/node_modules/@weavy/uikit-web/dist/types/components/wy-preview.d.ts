import { SwipeScrollController } from '../controllers/swipe-scroll-controller';
import { Ref } from 'lit/directives/ref.js';
import { UserType } from '../types/users.types';
import { InfiniteData, InfiniteQueryObserverResult, QueryObserverResult } from '@tanstack/query-core';
import { AppType } from '../types/app.types';
import { FilesResultType, FileType } from '../types/files.types';
import { FeaturesListType, FeaturesConfigType } from '../types/features.types';
import { LitElement, PropertyValues } from 'lit';

export default class WyPreview extends LitElement {
    static styles: import('lit').CSSResult[];
    private weavyContext?;
    uid: string;
    features?: FeaturesConfigType;
    availableFeatures?: FeaturesListType;
    files?: FileType[];
    queryResult?: QueryObserverResult<FileType[]>;
    infiniteQueryResult?: InfiniteQueryObserverResult<InfiniteData<FilesResultType, unknown>>;
    app?: AppType;
    user?: UserType;
    currentId: number;
    commentCount: number;
    isAttachment: boolean;
    currentFile?: FileType;
    previousFile?: FileType;
    nextFile?: FileType;
    showOverlay: boolean;
    commentsOpen: boolean;
    versionsOpen: boolean;
    versionFile?: FileType;
    sidePanelMaximized: boolean;
    private persistState;
    private history;
    previewFileRef: Ref<Element>;
    swipeScrollRef: Ref<Element>;
    prevRef: Ref<Element>;
    nextRef: Ref<Element>;
    swipeScroller: SwipeScrollController;
    private disableSwipeScroll;
    private disableSwipeScrollTimeout?;
    open(file?: FileType, fileList?: FileType[], uid?: string): void;
    close(): void;
    toggleSidebarTab(tab?: "comments" | "versions", state?: boolean): void;
    handleVersionFile(e: CustomEvent): void;
    handleKeys: (e: KeyboardEvent) => void;
    scrollToPrev(): void;
    scrollToNext(): void;
    blockSwipeScroll(duration?: number): void;
    unblockSwipeScroll(): void;
    setPrev(): void;
    setNext(): void;
    currentPreviewFileCallback(refElement: Element | undefined): void;
    willUpdate(changedProperties: PropertyValues<this>): void;
    renderHeader(activeFile?: FileType): import('lit-html').TemplateResult<1>;
    render(): import('lit-html/directive').DirectiveResult<typeof import("lit-modal-portal/portal").PortalDirective>;
    updated(): void;
}
//# sourceMappingURL=wy-preview.d.ts.map