import { WeavyContextProps } from '../types/weavy.types';
import { UserType } from '../types/users.types';
import { ConversationType } from '../types/conversations.types';
import { WeavyContextType } from '../client/context-definition';
import { ContextConsumer } from '@lit/context';
import { LitElement, PropertyValues } from 'lit';

export default class WyConversationAppbar extends LitElement {
    static styles: import('lit').CSSResult[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContextType;
    }, this>;
    protected weavyContext?: WeavyContextType;
    user?: UserType;
    conversationId?: number;
    conversation?: ConversationType;
    showAddMembers: boolean;
    showDetails: boolean;
    conversationTitle: string;
    protected conversationTitleInput: string;
    /**
     * A keyboard-consuming element releases focus.
     * @event release-focus
     */
    private releaseFocusEvent;
    protected isPrivateChat(conversation?: ConversationType): boolean;
    protected isChatRoom(conversation?: ConversationType): boolean;
    private membersQuery;
    private userQuery;
    private addMembersMutation?;
    private leaveConversationMutation?;
    private updateConversationMutation?;
    private handleRealtimeAppUpdated;
    private unsubscribeToRealtime;
    private addMembers;
    private handleSaveConversationName;
    private leaveConversation;
    scheduleUpdate(): Promise<void>;
    protected willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): void;
    render(): import('lit-html').TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-conversation-appbar.d.ts.map