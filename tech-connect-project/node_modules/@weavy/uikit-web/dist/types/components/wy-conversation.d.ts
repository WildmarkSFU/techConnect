import { MarkConversationMutationType } from '../data/conversation';
import { PollMutationType } from '../data/poll';
import { WeavyContextProps } from '../types/weavy.types';
import { Ref } from 'lit/directives/ref.js';
import { QueryController } from '../controllers/query-controller';
import { MutationController } from '../controllers/mutation-controller';
import { ReverseInfiniteScrollController } from '../controllers/infinite-scroll-controller';
import { InfiniteQueryController } from '../controllers/infinite-query-controller';
import { FeaturesConfigType, FeaturesListType } from '../types/features.types';
import { UserType } from '../types/users.types';
import { MessageMutationContextType, MessageType, MessagesResultType, MutateMessageProps } from '../types/messages.types';
import { ConversationType } from '../types/conversations.types';
import { WeavyContextType } from '../client/context-definition';
import { ContextConsumer } from '@lit/context';
import { LitElement, PropertyValues } from 'lit';

export default class WyConversation extends LitElement {
    static styles: import('lit').CSSResult[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContextType;
    }, this>;
    protected weavyContext?: WeavyContextType;
    user?: UserType;
    conversationId?: number;
    conversation?: ConversationType;
    cssClass?: string;
    availableFeatures?: FeaturesListType;
    features: FeaturesConfigType;
    lastReadMessagePosition: "above" | "below";
    lastReadMessageId?: number;
    lastReadMessageShow: boolean;
    /**
     * A keyboard-consuming element releases focus.
     * @event release-focus
     */
    releaseFocusEvent: () => CustomEvent<undefined>;
    protected markConversationMutation?: MarkConversationMutationType;
    messagesQuery: InfiniteQueryController<MessagesResultType>;
    userQuery: QueryController<UserType>;
    featuresQuery: QueryController<FeaturesListType>;
    private updateConversationMutation?;
    protected pollMutation?: PollMutationType;
    protected addMessageMutation: MutationController<MessageType, Error, MutateMessageProps, MessageMutationContextType>;
    protected infiniteScroll: ReverseInfiniteScrollController;
    protected pagerRef: Ref<Element>;
    protected shouldBeAtBottom: boolean;
    protected handleSubmit(e: CustomEvent): Promise<MessageType>;
    setEmptyConversationTitle(name: string): Promise<void>;
    private handleRealtimeMessage;
    private handleRealtimeReactionAdded;
    private handleRealtimeReactionDeleted;
    get isAtBottom(): boolean;
    scrollToBottom(): void;
    protected unsubscribeToRealtime(conversationId: number): void;
    showUnread(placement: "above" | "below", messageId?: number): void;
    hideUnread(): void;
    markAsRead(messageId?: number, instantly?: boolean): Promise<void>;
    protected markAsReadWhenVisible: () => void;
    scheduleUpdate(): Promise<void>;
    protected willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): void;
    protected update(changedProperties: PropertyValues<this>): void;
    render(): import('lit-html').TemplateResult<1>;
    updated(): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-conversation.d.ts.map