import { CompletionContext, CompletionResult } from '@codemirror/autocomplete';
import { Extension } from '@codemirror/state';
import { EditorView, KeyBinding } from '@codemirror/view';
import { WeavyContextProps } from '../types/weavy.types';
import { DropZoneController } from '../controllers/dropzone-controller';
import { EmbedType } from '../types/embeds.types';
import { PollOptionType } from '../types/polls.types';
import { ExternalBlobMutationType } from '../data/blob-external';
import { default as WeavyCloudFiles } from './wy-cloud-files';
import { MutationState } from '@tanstack/query-core';
import { MutationStateController } from '../controllers/mutation-state-controller';
import { UserType } from '../types/users.types';
import { AppType } from '../types/app.types';
import { BlobType, ExternalBlobType, FileMutationContextType, FileType, MutateFileProps } from '../types/files.types';
import { MutationController } from '../controllers/mutation-controller';
import { MeetingType } from '../types/meetings.types';
import { FeaturesConfigType, FeaturesListType } from '../types/features.types';
import { WeavyContextType } from '../client/context-definition';
import { Ref } from 'lit/directives/ref.js';
import { LitElement, nothing, TemplateResult, PropertyValues } from 'lit';

export default class WyEditor extends LitElement {
    static styles: import('lit').CSSResult;
    protected weavyContext?: WeavyContextType;
    app?: AppType;
    parentId?: number;
    user?: UserType;
    private _placeholder;
    get placeholder(): string;
    set placeholder(placeholder: string);
    text?: string;
    embed?: EmbedType;
    options?: PollOptionType[];
    attachments: FileType[];
    buttonText: string;
    typing: boolean;
    draft: boolean;
    editorType: "messages" | "posts" | "comments";
    editorClass: string;
    editorLocation: "messages" | "posts" | "apps" | "files";
    availableFeatures?: FeaturesListType;
    features?: FeaturesConfigType;
    protected meeting?: MeetingType;
    protected editorError: boolean;
    protected showPolls: boolean;
    protected pollOptions: PollOptionType[];
    protected embeds: EmbedType[];
    protected draftKey: string;
    protected uploadBlobMutation: MutationController<BlobType, Error, MutateFileProps, FileMutationContextType>;
    protected mutatingFiles: MutationStateController<BlobType | FileType, Error, MutateFileProps, FileMutationContextType>;
    protected externalBlobMutation?: ExternalBlobMutationType;
    protected fileInputRef: Ref<HTMLInputElement>;
    protected cloudFilesRef: Ref<WeavyCloudFiles>;
    protected dropZone: DropZoneController;
    protected keyMap: KeyBinding[];
    protected editorExtensions?: Extension[];
    protected editor?: EditorView;
    protected editorRef: Ref<HTMLElement>;
    private throttledTyping;
    private throttledDrafting;
    constructor();
    willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): void;
    protected updated(changedProperties: PropertyValues<this & WeavyContextProps>): void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private createMeeting;
    protected handleRemoveMeeting(): void;
    protected autocomplete(context: CompletionContext): Promise<CompletionResult | null>;
    protected openFileInput: () => void;
    protected openCloudFiles: () => void;
    protected handleDropFiles(e: Event): void;
    protected handleUploadFiles(files: File[] | null, input?: HTMLInputElement): Promise<void>;
    protected handleExternalBlobs(externalBlobs: ExternalBlobType[] | null): void;
    protected handleRemoveUpload(mutation: MutationState<BlobType, Error, MutateFileProps, FileMutationContextType>): void;
    protected saveDraft(): void;
    protected handleRemoveAttachment(attachment: FileType): void;
    protected submit(): Promise<void>;
    protected resetEditor(): void;
    protected clearEditor(): void;
    protected handleZoomClick(): void;
    protected setEmbeds(embed: EmbedType): void;
    protected handleEmbeds(content: string): Promise<void>;
    protected removeEmbed(e: CustomEvent): void;
    protected swapEmbed(): void;
    protected openPolls(): void;
    protected handlePollOptionChange(e: Event, index: number): void;
    protected handlePollOptionAdd(e: Event, index: number): void;
    protected renderTopSlot(): TemplateResult | typeof nothing;
    protected renderMiddleSlot(): TemplateResult | typeof nothing;
    protected renderBottomSlot(): TemplateResult | typeof nothing;
    protected renderLists(): TemplateResult | typeof nothing;
    protected renderCloudFiles(): TemplateResult | typeof nothing;
    protected render(): TemplateResult<1>;
}
//# sourceMappingURL=wy-editor.d.ts.map