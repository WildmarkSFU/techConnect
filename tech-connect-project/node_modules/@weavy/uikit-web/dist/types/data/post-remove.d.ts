import { AppType } from '../types/app.types';
import { PostMutationContextType, PostType } from '../types/posts.types';
import { WeavyContextType } from '../client/weavy-context';
import { MutationKey, MutationObserver } from '@tanstack/query-core';

export type MutatePostVariables = {
    id: number;
};
export type RemovePostMutationType = MutationObserver<PostType, Error, MutatePostVariables, PostMutationContextType>;
export type DeleteForeverPostMutationType = MutationObserver<void, Error, MutatePostVariables, PostMutationContextType>;
export declare function getTrashPostMutationOptions(weavyContext: WeavyContextType, app: AppType): {
    mutationKey: MutationKey;
    mutationFn: ({ id }: MutatePostVariables) => Promise<any>;
    onMutate: (variables: MutatePostVariables) => Promise<PostMutationContextType>;
    onSuccess: (data: PostType, variables: MutatePostVariables) => void;
};
export declare function getTrashPostMutation(weavyContext: WeavyContextType, app: AppType): RemovePostMutationType;
export declare function getRestorePostMutationOptions(weavyContext: WeavyContextType, app: AppType): {
    mutationKey: MutationKey;
    mutationFn: ({ id }: MutatePostVariables) => Promise<any>;
    onMutate: (variables: MutatePostVariables) => Promise<PostMutationContextType>;
    onSuccess: (data: PostType, variables: MutatePostVariables) => void;
};
export declare function getRestorePostMutation(weavyContext: WeavyContextType, app: AppType): RemovePostMutationType;
//# sourceMappingURL=post-remove.d.ts.map