import { ConversationMutationContextType, ConversationTypeGuid, ConversationTypeString, ConversationsResultType, ConversationType } from '../types/conversations.types';
import { WeavyContextType } from '../client/weavy-context';
import { InfiniteQueryObserverOptions, InfiniteData, MutationObserver } from '@tanstack/query-core';

export type MutateAddConversationVariables = {
    members: (number | string)[];
    type?: ConversationTypeString;
};
export type AddConversationMutationType = MutationObserver<ConversationType, Error, MutateAddConversationVariables, ConversationMutationContextType>;
export declare function getConversationsOptions(weavyContext: WeavyContextType, options?: Object, searchText?: () => string | undefined, types?: ConversationTypeGuid[] | null, member?: string): InfiniteQueryObserverOptions<ConversationsResultType, Error, InfiniteData<ConversationsResultType>>;
export declare function getAddConversationMutationOptions(weavyContext: WeavyContextType): {
    mutationFn: ({ members, type }: MutateAddConversationVariables) => Promise<any>;
    onMutate: (_variables: MutateAddConversationVariables) => Promise<ConversationMutationContextType>;
};
export declare function getAddConversationMutation(weavyContext: WeavyContextType): AddConversationMutationType;
//# sourceMappingURL=conversations.d.ts.map