import { PlainObjectType } from '../types/generic.types';

/**
 * Checks if an object is an object.
 *
 * @param {any} maybeObject - The object to check
 * @returns {boolean} True if the object is an object
 */
export declare function isObject(maybeObject: unknown): boolean;
/**
 * Checks if an object is a plain object {}, similar to jQuery.isPlainObject()
 *
 * @param {Object} maybePlainObject - The object to check
 * @returns {boolean} True if the object is plain
 */
export declare function isPlainObject(maybePlainObject: unknown): boolean;
/**
 * Method for extending plainObjects/options, similar to Object.assign() but with deep/recursive merging. If the recursive setting is applied it will merge any plain object children. Note that Arrays are treated as data and not as tree structure when merging.
 *
 * The original options passed are left untouched.
 *
 * @param {Object} source - Original options.
 * @param {Object} properties - Merged options that will replace options from the source.
 * @param {boolean} [recursive=false] True will merge any sub-objects of the options recursively. Otherwise sub-objects are treated as data.
 * @returns {Object} A new object containing the merged options.
 */
export declare function assign<TSource>(source: TSource | PlainObjectType, properties: TSource | PlainObjectType, recursive?: boolean): TSource;
/**
 * Always returns an Array.
 *
 * @example
 * asArray(1); // [1]
 * asArray([1]); // [1]
 *
 * @param {any} maybeArray
 * @returns {Array}
 */
export declare function asArray(maybeArray: unknown): {};
/**
 * Case insensitive string comparison
 *
 * @param {any} str1 - The first string to compare
 * @param {any} str2 - The second string to compare
 * @param {boolean} ignoreType - Skip type check and use any stringified value
 * @returns {boolean}
 */
export declare function eqString(str1: string | unknown, str2: string | unknown, ignoreType?: boolean): boolean;
/**
 * Compares two plain objects. Compares all the properties in a to any properties in b.
 *
 * @param {any} a - The plain object to compare with b
 * @param {any} b - The plain object to compare properties from a to
 * @param {boolean} skipLength - Do not compare the number of properties
 * @param {boolean} anyObject - Compare anything as objects
 * @returns {boolean}
 */
export declare function eqObjects(a: PlainObjectType, b: PlainObjectType, skipLength?: boolean, anyObject?: boolean): boolean;
//# sourceMappingURL=objects.d.ts.map