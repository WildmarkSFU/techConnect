/**
 * Gets the next positioned child relative to the element.
 *
 * @param {Element} el - Reference element in the scrollable area
 * @returns HTMLElement
 */
export declare function getNextPositionedChild(el: Element | null): HTMLElement | null;
/**
 * Finds the nearest scrollable area. Defaults to document.scrollingElement.
 *
 * @param {Element?} element - Reference element in the scrollable area
 * @param {boolean} [includeHidden=false] - Treat elements with `overflow: hidden` as scrollable areas.
 * @returns Element
 */
export declare function getScrollParent(element: Element, includeHidden?: boolean): HTMLElement;
/**
 * Checks if a parent scroll container has any overflow
 * @param {Element?} element
 * @returns boolean
 */
export declare function hasScroll(element?: Element): boolean;
/**
 * Checks if a parent scroll container is scrolled to bottom
 * @param {Element?} element
 * @param {number} [bottomThreshold=32] - Nearby limit for the bottom. Needs to be at least 1 to catch float calculation errors.
 * @returns boolean
 */
export declare function isParentAtBottom(element: Element, bottomThreshold?: number): boolean;
/**
 * Scrolls a parent scroll container to the bottom using a reference element in the scrollable area.
 *
 * @param {Element?} element - Element in the scroll area
 * @param {boolean} [smooth] - Use smooth scrolling instead of instant scrolling
 */
export declare function scrollParentToBottom(element?: Element, smooth?: boolean): Promise<void>;
//# sourceMappingURL=scroll-position.d.ts.map