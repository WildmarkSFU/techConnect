import { CSSResultOrNative } from 'lit';

export declare function getCSSThemeColor(element: Element): string | undefined;
export declare function observeCSSThemeColor(element: Element, callback: (themeColor?: string) => void): () => void;
export declare function getMetaThemeColor(): string | undefined;
export declare function observeMetaThemeColor(callback: (themeColor?: string) => void): () => void;
export declare function generateThemeColors(seedColor: string, includeThemeColor?: boolean): string[];
/**
 * Applies the given styles to a `shadowRoot`. When Shadow DOM is
 * available but `adoptedStyleSheets` is not, styles are appended to the
 * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
 * Note, when shimming is used, any styles that are subsequently placed into
 * the shadowRoot should be placed *before* any shimmed adopted styles. This
 * will match spec behavior that gives adopted sheets precedence over styles in
 * shadowRoot.
 */
export declare const adoptGlobalStyles: (styles: Array<CSSResultOrNative>) => void;
//# sourceMappingURL=styles.d.ts.map