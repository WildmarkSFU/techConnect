/**
 * Makes the first letter in a string uppercase
 *
 * @param {string} str - The string to transform
 * @returns {string} - The transformed string
 */
export declare function toUpperCaseFirst(str: string): string;
export declare const wordBoundary = "\\s,.:;\"";
export declare const wordBoundaryWithHyphens = "\\s\\-,.:;\"_";
export declare const separateByWordBoundaryRegExp: RegExp;
export declare const separateByWordBoundaryWithHyphensRegExp: RegExp;
export declare const selectByWordBoundaryRegExp: RegExp;
export declare const selectByWordBoundaryWithHyphensRegExp: RegExp;
/**
 *  Converts Initial Letters To Uppercase.
 *  Respects Bound-Words and don't convert contractions like "don't"
 *
 * @param str {string}
 * @returns {string}
 */
export declare function toTitleCase(str: string): string;
/**
 * Changes a string to snake_case from camelCase, PascalCase and spinal-case.
 *
 * @param {string} str - The string to change to snake case
 * @returns {string} The processed string as snake_case
 */
export declare function toSnakeCase(str: string): string;
/**
 * Changes a string to kebab-case/spinal-case from camelCase, PascalCase and snake_case.
 *
 * @param {string} str - The string to change to kebab case
 * @returns {string} The processed string as kebab-case
 */
export declare function toKebabCase(str: string): string;
/**
 * Changes a string to camelCase from PascalCase, spinal-case and snake_case.
 *
 * @param {string} str - The string to change to camel case
 * @param {boolean} [pascal] - Make ste string PascalCase
 * @returns {string} The processed string as camelCase or PascalCase
 */
export declare function toCamelCase(str: string, pascal?: boolean): string;
/**
 *
 * @param name {string} - A name for which to get get initials, e.g. "Eddie" or "John Doe"
 * @param length {number} - Max number of chars to return.
 * @returns
 */
export declare function getInitials(name: string, length?: number): string | null;
//# sourceMappingURL=strings.d.ts.map