import { PlainObjectType } from '../types/generic.types';

export declare const defaultFetchSettings: RequestInit;
/**
 * Removes HTMLElement and Node from object before serializing. Used with JSON.stringify().
 *
 * @example
 * var jsonString = JSON.stringify(data, sanitizeJSON);
 *
 * @param {string} key
 * @param {any} value
 * @returns {any} - Returns the value or undefined if removed.
 */
export declare function sanitizeJSON(_key: string, value: unknown): unknown;
/**
 * Changes all object keys recursively to camelCase from PascalCase, spinal-case and snake_case.
 *
 * @param {Object} obj - The object containing keys to process
 * @param {boolean} pascal - Make keys PascalCase
 * @returns {Object} The processed object with any camelCase or PascalCase keys
 */
export declare function keysToCamelCase(obj: PlainObjectType, pascal?: boolean): object;
/**
 * Changes all object keys recursively to PascalCase from camelCase, spinal-case and snake_case.
 *
 * @param {Object} obj - The object containing keys to process
 * @returns {Object} The processed object with any PascalCase keys
 */
export declare function keysToPascalCase(obj: PlainObjectType): object;
/**
 * Serializes a form to an object with data.
 *
 * @param {HTMLFormElement} form - The form to serialize
 * @param {boolean} snake_case - Use snake case for property names
 * @returns {Object}
 */
export declare function serializeObject(form: HTMLFormElement, snake_case: boolean): PlainObjectType;
/**
 * Generate a S4 alphanumeric 4 character sequence suitable for non-sensitive GUID generation etc.
 */
export declare function S4(): string;
export declare function getTextStreamFromResponse(response: Response): ReadableStream<any>;
//# sourceMappingURL=data.d.ts.map