import { RealtimeFileEventType } from './types/realtime.types';
import { FileOrderType, FileViewType } from './types/files.types';
import { FeaturesListType, FeaturesConfigType } from './types/features.types';
import { UserType } from './types/users.types';
import { AppType } from './types/app.types';
import { WeavyContextType } from './client/context-definition';
import { ContextConsumer } from '@lit/context';
import { LitElement, PropertyValues } from 'lit';

/**
 * Files component to render a list of uploaded files and linked files from cloud providers.
 *
 * @element wy-files
 * @class WyFiles
 */
export declare class WyFiles extends LitElement {
    static styles: import('lit').CSSResult[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContextType;
    }, this>;
    protected weavyContext?: WeavyContextType;
    /**
     * Unique identifier for your app component.
     * The uid should correspond to the uid of the app created using the server-to-server Web API.
     */
    uid: string;
    /**
     * Config for disabling features in the component.
     * *Note: You can't enable any features that aren't available in your license.*
     */
    features: FeaturesConfigType;
    /**
     * The view for showing the file list.
     * This value is persisted in sessionStorage.
     */
    view: FileViewType;
    /**
     * File order in the list. Order by combined with direction.
     * This value is persisted in sessionStorage.
     * Order by: "id" | "name" | "size" | "created_at" | "modified_at" | "timestamp".
     */
    order: FileOrderType;
    /**
     * Enable showing trashed files.
     * This value is persisted in sessionStorage.
     */
    showTrashed: boolean;
    protected app?: AppType;
    protected user?: UserType;
    protected availableFeatures?: FeaturesListType;
    /**
     * Event: New file created.
     * @event wy:file_created
     */
    protected realtimeFileCreatedEvent: (realtimeEvent: RealtimeFileEventType) => CustomEvent<RealtimeFileEventType>;
    /**
     * Event: File updated.
     * @event wy:file_updated
     */
    protected realtimeFileUpdatedEvent: (realtimeEvent: RealtimeFileEventType) => CustomEvent<RealtimeFileEventType>;
    /**
     * Event: File trashed.
     * @event wy:file_trashed
     */
    protected realtimeFileTrashedEvent: (realtimeEvent: RealtimeFileEventType) => CustomEvent<RealtimeFileEventType>;
    /**
     * Event: File restored.
     * @event wy:file_restored
     */
    protected realtimeFileRestoredEvent: (realtimeEvent: RealtimeFileEventType) => CustomEvent<RealtimeFileEventType>;
    /**
     * Event: File permanently deleted.
     * @event wy:file_deleted
     */
    protected realtimeFileDeletedEvent: (realtimeEvent: RealtimeFileEventType) => CustomEvent<RealtimeFileEventType>;
    private appQuery;
    private userQuery;
    private featuresQuery;
    private filesQuery;
    private persistState;
    private infiniteScroll;
    private pagerRef;
    private previewRef;
    private dropZone;
    private appSubscribeMutation;
    private uploadBlobMutation;
    private externalBlobMutation?;
    private createFileMutation;
    private renameFileMutation?;
    private subscribeFileMutation?;
    private trashFileMutation?;
    private restoreFileMutation?;
    private deleteForeverFileMutation?;
    private handleBlobUpload;
    private handleExternalBlobs;
    private handleCreateFile;
    private handleSubscribe;
    protected getFilesQueryKey(): (string | number)[];
    protected handleRealtimeFileCreated: (realtimeEvent: RealtimeFileEventType) => void;
    protected handleRealtimeFileUpdated: (realtimeEvent: RealtimeFileEventType) => void;
    protected handleRealtimeFileTrashed: (realtimeEvent: RealtimeFileEventType) => void;
    protected handleRealtimeFileRestored: (realtimeEvent: RealtimeFileEventType) => void;
    protected handleRealtimeFileDeleted: (realtimeEvent: RealtimeFileEventType) => void;
    private unsubscribeToRealtime;
    constructor();
    scheduleUpdate(): Promise<void>;
    protected willUpdate(changedProperties: PropertyValues<this & {
        app: AppType;
        weavyContext: WeavyContextType;
        user: UserType;
    }>): void;
    protected updated(): void;
    protected render(): import('lit-html').TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-files.d.ts.map