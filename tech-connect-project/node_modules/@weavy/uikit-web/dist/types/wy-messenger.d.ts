import { WeavyContextProps } from './types/weavy.types';
import { BotType, UserType } from './types/users.types';
import { QueryController } from './controllers/query-controller';
import { ConversationTypeGuid, ConversationType } from './types/conversations.types';
import { AppType } from './types/app.types';
import { RealtimeAppEventType, RealtimeConversationDeliveredEventType, RealtimeConversationMarkedEventType, RealtimeMemberEventType, RealtimeMessageEventType } from './types/realtime.types';
import { WeavyContextType } from './client/context-definition';
import { ContextConsumer } from '@lit/context';
import { FeaturesConfigType, FeaturesListType } from './types/features.types';
import { PersistStateController } from './controllers/persist-state-controller';
import { LitElement, PropertyValues, PropertyValueMap } from 'lit';

export declare class WyMessenger extends LitElement {
    static styles: import('lit').CSSResult[];
    protected weavyContextConsumer?: ContextConsumer<{
        __context__: WeavyContextType;
    }, this>;
    protected weavyContext?: WeavyContextType;
    name?: string;
    bot?: string;
    types: ConversationTypeGuid[];
    botUser?: BotType;
    user?: UserType;
    conversationId: number | null;
    protected conversation?: ConversationType;
    features: FeaturesConfigType;
    availableFeatures?: FeaturesListType;
    protected conversationQuery: QueryController<ConversationType>;
    protected userQuery: QueryController<UserType>;
    protected featuresQuery: QueryController<FeaturesListType>;
    protected botQuery: QueryController<BotType>;
    protected persistState: PersistStateController<this>;
    hasEventListener: {
        [key: string]: boolean;
    };
    /**
     * @ignore
     */
    addEventListener(type: any, listener: any, options?: any): void;
    /**
     * A keyboard-consuming element releases focus.
     * @event release-focus
     */
    protected releaseFocusEvent: () => CustomEvent<undefined>;
    /**
     * Event: New message created.
     * @event wy:message_created
     */
    protected realtimeMessageCreatedEvent: (realtimeEvent: RealtimeMessageEventType) => Promise<void>;
    /**
     * Event: Conversation added.
     * @event wy:app_created
     */
    protected realtimeAppCreatedEvent: (realtimeEvent: RealtimeAppEventType) => Promise<void>;
    /**
     * Event: Message seen-by status updated.
     * @event wy:conversation_marked
     */
    protected realtimeConversationMarkedEvent: (realtimeEvent: RealtimeConversationMarkedEventType) => Promise<void>;
    /**
     * Event: Message delivered status updated.
     * @event wy:conversation_delivered
     */
    protected realtimeConversationDeliveredEvent: (realtimeEvent: RealtimeConversationDeliveredEventType) => Promise<void>;
    /**
     * Event: A member is added to a conversation app.
     * @event wy:member_added
     */
    protected realtimeMemberAddedEvent: (realtimeEvent: RealtimeMemberEventType) => Promise<void>;
    /**
     * Checks if a conversation belongs to Messenger.
     *
     * @param conversation {AppType | number} - The conversation or id to check if it belongs to Messenger.
     * @returns Promise<Boolean>
     */
    conversationBelongsToMessenger(conversation: AppType | number): Promise<Boolean>;
    /**
     * Set the active conversation.
     *
     * @param id {number} - The id of the conversation to select.
     */
    selectConversation(id: number): Promise<void>;
    /**
     * Deselects any active conversation.
     */
    clearConversation(): void;
    constructor();
    protected scheduleUpdate(): Promise<void>;
    protected willUpdate(changedProperties: PropertyValues<this & WeavyContextProps>): Promise<void>;
    protected update(changedProperties: PropertyValueMap<this & WeavyContextProps>): void;
    render(): import('lit-html').TemplateResult<1>;
    disconnectedCallback(): void;
}
//# sourceMappingURL=wy-messenger.d.ts.map