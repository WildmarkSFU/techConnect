import { WeavyContextOptionsType } from '../types/weavy.types';
import { WeavyContext, WeavyContextType } from './weavy-context';

export interface WeavyVersionProps {
    readonly version: string;
    checkVersion: (version?: string) => Promise<void>;
}
export declare const WeavyVersionMixin: (base: typeof WeavyContext) => {
    new (options: WeavyContextOptionsType): {
        readonly version: string;
        /**
         * Checks the version of the Weavy Context against the Weavy Environment version.
         *
         * @param {string} [version] - Optional version to check against the environment version.
         */
        checkVersion(this: any & WeavyContext & import('./localization').WeavyLocalizationProps & import('./network').WeavyNetworkProps & import('./authentication').WeavyAuthenticationProps & import('./connection').WeavyConnectionProps & import('./query').WeavyQueryProps & WeavyVersionProps & import('./modals').WeavyModalsProps & import('./fetch').WeavyFetchProps & import('./styles').WeavyStylesProps, version?: string): Promise<void>;
        readonly weavySid: string;
        readonly weavyId: string;
        readonly host: HTMLElement;
        "__#12@#hostContextProvider"?: import('../utils/context-provider').WyContextProvider<{
            __context__: WeavyContextType;
        }, Partial<import("lit").ReactiveControllerHost> & HTMLElement> | undefined;
        cloudFilePickerUrl: string | URL | undefined;
        confluenceAuthenticationUrl: string | URL | undefined;
        confluenceProductName: string | undefined;
        disableEnvironmentImports: boolean | undefined;
        gcTime: number | undefined;
        modalParent: string | undefined;
        reactions: string[] | undefined;
        scrollBehavior: "smooth" | "instant" | "auto" | undefined;
        staleTime: number | undefined;
        tokenFactoryRetryDelay: number | undefined;
        tokenFactoryTimeout: number | undefined;
        zoomAuthenticationUrl: string | URL | undefined;
        "__#12@#resolveUrl"?: ((url: URL) => void) | undefined;
        "__#12@#whenUrl": Promise<unknown>;
        whenUrl(): Promise<void>;
        "__#12@#url"?: URL | undefined;
        url: string | URL | undefined;
        "__#12@#isDestroyed": boolean;
        readonly isDestroyed: boolean;
        destroy(): void;
    };
    readonly version: string;
    readonly sourceName: string;
    defaults: import('../types/weavy.types').WeavyOptions;
};
//# sourceMappingURL=version.d.ts.map