import { WeavyTokenFactory, WeavyContextOptionsType } from '../types/weavy.types';
import { WeavyContext, WeavyContextType } from './weavy-context';

export interface WeavyAuthenticationProps {
    whenUrlAndTokenFactory: () => Promise<void>;
    whenTokenIsValid: () => Promise<void>;
    tokenFactory: WeavyTokenFactory | undefined;
    tokenUrl: string | URL | undefined;
    getToken: (refresh?: boolean) => Promise<string>;
}
export declare const WeavyAuthenticationMixin: (base: typeof WeavyContext) => {
    new (options: WeavyContextOptionsType): {
        _resolveUrlAndTokenFactory?: ((value: unknown) => void) | undefined;
        _whenUrlAndTokenFactory: Promise<unknown>;
        whenUrlAndTokenFactory(): Promise<void>;
        _resolveTokenIsValid?: ((value: unknown) => void) | undefined;
        _whenTokenIsValid: Promise<unknown>;
        whenTokenIsValid(): Promise<void>;
        _tokenFactory?: WeavyTokenFactory | undefined;
        /**
         * Async function returning an `access_token` string for _your_ authenticated user. A boolean `refresh` parameter is provided to let you now if a fresh token is needed from Weavy.
         */
        tokenFactory: WeavyTokenFactory | undefined;
        _tokenUrl?: URL | undefined;
        /**
         * An URL to an endpoint returning an JSON data containing an `access_token` string property for _your_ authenticated user. A boolean `refresh=true` query parameter is provided in the request to let you now if when a fresh token is needed from Weavy.
         */
        tokenUrl: string | URL | undefined;
        _tokenPromise: Promise<string> | null;
        _token: string;
        _validateToken(token: unknown): boolean;
        _validTokenFromFactory: WeavyTokenFactory;
        getToken(refresh?: boolean): Promise<string>;
        readonly weavySid: string;
        readonly weavyId: string;
        readonly host: HTMLElement;
        "__#12@#hostContextProvider"?: import('../utils/context-provider').WyContextProvider<{
            __context__: WeavyContextType;
        }, Partial<import("lit").ReactiveControllerHost> & HTMLElement> | undefined;
        cloudFilePickerUrl: string | URL | undefined;
        confluenceAuthenticationUrl: string | URL | undefined;
        confluenceProductName: string | undefined;
        disableEnvironmentImports: boolean | undefined;
        gcTime: number | undefined;
        modalParent: string | undefined;
        reactions: string[] | undefined;
        scrollBehavior: "smooth" | "instant" | "auto" | undefined;
        staleTime: number | undefined;
        tokenFactoryRetryDelay: number | undefined;
        tokenFactoryTimeout: number | undefined;
        zoomAuthenticationUrl: string | URL | undefined;
        "__#12@#resolveUrl"?: ((url: URL) => void) | undefined;
        "__#12@#whenUrl": Promise<unknown>;
        whenUrl(): Promise<void>;
        "__#12@#url"?: URL | undefined;
        url: string | URL | undefined;
        "__#12@#isDestroyed": boolean;
        readonly isDestroyed: boolean;
        destroy(): void;
    };
    readonly version: string;
    readonly sourceName: string;
    defaults: import('../types/weavy.types').WeavyOptions;
};
//# sourceMappingURL=authentication.d.ts.map