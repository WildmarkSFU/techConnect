import { WeavyContextOptionsType } from '../types/weavy.types';
import { HubConnection } from '../../@microsoft/signalr/dist/browser/signalr.min.js';
import { RealtimeDataType, RealtimeEventType } from '../types/realtime.types';
import { WeavyContext, WeavyContextType } from './weavy-context';

export interface WeavyConnectionProps {
    whenConnectionRequested: () => Promise<void>;
    whenConnectionStarted: () => Promise<void>;
    createConnection: () => Promise<void>;
    disconnect: () => Promise<void>;
    connect: () => Promise<void>;
    subscribe: <T extends RealtimeEventType | RealtimeDataType>(group: string | null, event: string, callback: (realTimeEvent: T) => void) => Promise<void>;
    unsubscribe: <T extends RealtimeEventType | RealtimeDataType>(group: string | null, event: string, callback: (realTimeEvent: T) => void) => Promise<void>;
}
export declare const WeavyConnectionMixin: (base: typeof WeavyContext) => {
    new (options: WeavyContextOptionsType): {
        _resolveConnectionRequested?: ((value: unknown) => void) | undefined;
        _whenConnectionRequested: Promise<unknown>;
        whenConnectionRequested(): Promise<void>;
        _connection?: HubConnection | undefined;
        _connectionEventListeners: Array<{
            name: string;
            callback: Function;
        }>;
        signalRAccessTokenRefresh: boolean;
        _whenConnectionStartedResolve?: ((value: unknown) => void) | undefined;
        _whenConnectionStartedReject?: ((reason: unknown) => void) | undefined;
        _whenConnectionStarted: Promise<unknown>;
        readonly rtmConnection: HubConnection | undefined;
        whenConnectionStarted(): Promise<void>;
        createConnection(this: any & WeavyContext & import('./localization').WeavyLocalizationProps & import('./network').WeavyNetworkProps & import('./authentication').WeavyAuthenticationProps & WeavyConnectionProps & import('./query').WeavyQueryProps & import('./version').WeavyVersionProps & import('./modals').WeavyModalsProps & import('./fetch').WeavyFetchProps & import('./styles').WeavyStylesProps): Promise<void>;
        disconnect(this: any & WeavyContext & import('./localization').WeavyLocalizationProps & import('./network').WeavyNetworkProps & import('./authentication').WeavyAuthenticationProps & WeavyConnectionProps & import('./query').WeavyQueryProps & import('./version').WeavyVersionProps & import('./modals').WeavyModalsProps & import('./fetch').WeavyFetchProps & import('./styles').WeavyStylesProps): Promise<void>;
        connect(this: any & WeavyContext & import('./localization').WeavyLocalizationProps & import('./network').WeavyNetworkProps & import('./authentication').WeavyAuthenticationProps & WeavyConnectionProps & import('./query').WeavyQueryProps & import('./version').WeavyVersionProps & import('./modals').WeavyModalsProps & import('./fetch').WeavyFetchProps & import('./styles').WeavyStylesProps): Promise<void>;
        subscribe<T extends RealtimeDataType | RealtimeEventType>(group: string | null, event: string, callback: (realTimeEvent: T) => void): Promise<void>;
        unsubscribe<T_1 extends RealtimeDataType | RealtimeEventType>(group: string | null, event: string, callback: (realTimeEvent: T_1) => void): Promise<void>;
        destroy(this: any & WeavyContext & import('./localization').WeavyLocalizationProps & import('./network').WeavyNetworkProps & import('./authentication').WeavyAuthenticationProps & WeavyConnectionProps & import('./query').WeavyQueryProps & import('./version').WeavyVersionProps & import('./modals').WeavyModalsProps & import('./fetch').WeavyFetchProps & import('./styles').WeavyStylesProps): void;
        readonly weavySid: string;
        readonly weavyId: string;
        readonly host: HTMLElement;
        "__#12@#hostContextProvider"?: import('../utils/context-provider').WyContextProvider<{
            __context__: WeavyContextType;
        }, Partial<import("lit").ReactiveControllerHost> & HTMLElement> | undefined;
        cloudFilePickerUrl: string | URL | undefined;
        confluenceAuthenticationUrl: string | URL | undefined;
        confluenceProductName: string | undefined;
        disableEnvironmentImports: boolean | undefined;
        gcTime: number | undefined;
        modalParent: string | undefined;
        reactions: string[] | undefined;
        scrollBehavior: "smooth" | "instant" | "auto" | undefined;
        staleTime: number | undefined;
        tokenFactoryRetryDelay: number | undefined;
        tokenFactoryTimeout: number | undefined;
        zoomAuthenticationUrl: string | URL | undefined;
        "__#12@#resolveUrl"?: ((url: URL) => void) | undefined;
        "__#12@#whenUrl": Promise<unknown>;
        whenUrl(): Promise<void>;
        "__#12@#url"?: URL | undefined;
        url: string | URL | undefined;
        "__#12@#isDestroyed": boolean;
        readonly isDestroyed: boolean;
    };
    readonly version: string;
    readonly sourceName: string;
    defaults: import('../types/weavy.types').WeavyOptions;
};
//# sourceMappingURL=connection.d.ts.map