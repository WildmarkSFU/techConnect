import { WeavyStylesProps } from './styles';
import { WeavyFetchProps } from './fetch';
import { WeavyModalsProps } from './modals';
import { WeavyVersionProps } from './version';
import { WeavyQueryProps } from './query';
import { WeavyConnectionProps } from './connection';
import { WeavyAuthenticationProps } from './authentication';
import { WeavyNetworkProps } from './network';
import { WeavyLocalizationProps } from './localization';
import { WeavyOptions, Destructable, WeavyContextOptionsType } from '../types/weavy.types';

export type WeavyContextType = WeavyContext & WeavyLocalizationProps & WeavyNetworkProps & WeavyAuthenticationProps & WeavyConnectionProps & WeavyQueryProps & WeavyVersionProps & WeavyModalsProps & WeavyFetchProps & WeavyStylesProps;
/**
 * Context for Weavy that handles communication with the server, data handling and common options.
 * Requires a `url` to the Weavy environment and an async `tokenFactory` that provides user access tokens.
 */
export declare class WeavyContextBase implements WeavyOptions, Destructable {
    #private;
    /**
     * The semver version of the package.
     */
    static readonly version: string;
    /**
     * The Weavy source name; package name.
     */
    static readonly sourceName: string;
    static defaults: WeavyOptions;
    readonly weavySid: string;
    readonly weavyId: string;
    /**
     * The host where the Weavy context is provided.
     */
    readonly host: HTMLElement;
    cloudFilePickerUrl: string | URL | undefined;
    confluenceAuthenticationUrl: string | URL | undefined;
    confluenceProductName: string | undefined;
    disableEnvironmentImports: boolean | undefined;
    gcTime: number | undefined;
    modalParent: string | undefined;
    reactions: string[] | undefined;
    scrollBehavior: "smooth" | "instant" | "auto" | undefined;
    staleTime: number | undefined;
    tokenFactoryRetryDelay: number | undefined;
    tokenFactoryTimeout: number | undefined;
    zoomAuthenticationUrl: string | URL | undefined;
    whenUrl(): Promise<void>;
    /**
     * The URL to the weavy environment.
     */
    get url(): string | URL | undefined;
    set url(url: string | URL | undefined);
    constructor(options: WeavyContextOptionsType);
    get isDestroyed(): boolean;
    destroy(): void;
}
export declare class WeavyContext extends WeavyContextBase {
}
export declare const Weavy: typeof WeavyContext;
//# sourceMappingURL=weavy-context.d.ts.map